{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "airbnb-base",
    "plugin:react/recommended",
    "standard-with-typescript"
  ],
  "overrides": [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": [
      "./client/tsconfig.json",
      "./auth/tsconfig.json",
      "./tickets/tsconfig.json"
    ],
    "ecmaVersion": 2022,
    "engines": {
      "node": ">=18.0.0"
    },
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": ["react"],
  "rules": {
    "react/react-in-jsx-scope": 0,
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".tsx"]
      }
    ],

    // wont allow padding in blocks of code
    "padded-blocks": ["error", "never"],

    // adds line after all imports
    "import/newline-after-import": ["error", { "count": 1 }],

    // add proper spacing between statements and blocks of code
    "padding-line-between-statements": [
      "error",
      // groups all imports together
      { "blankLine": "never", "prev": "import", "next": "import" },

      // blank line after declaration section and blocks of code
      {
        "blankLine": "always",
        "prev": ["const", "let", "var", "block", "block-like"],
        "next": "*"
      },

      // black line before export
      { "blankLine": "always", "prev": "*", "next": ["export"] },

      // group all declarations together
      {
        "blankLine": "never",
        "prev": ["const", "let", "var"],
        "next": ["const", "let", "var"]
      }
    ],

    // only 1 line of spacing. no mutliple lines
    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 1 }],

    // I dont care that I am using a named export instead of a default export
    "import/prefer-default-export": 0,

    // using this rule to allow dev dependencies in only testfiles
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": ["**/*.test.ts", "**/*.test.tsx", "**/test/setup.ts"]
      }
    ],

    // allowing typescript to implicityly infer return types
    "@typescript-eslint/explicit-function-return-type": 0,

    // allowing temperal literals on any type. ! be warned it logging objects will not convert to string show ill show object object
    "@typescript-eslint/restrict-template-expressions": 0,

    // typescript on --fix argument fixes all promises by attaching await before them this is needed becuase of its own stupidity
    "no-return-await": 0,

    // allowing || to be used instead of ?? in typescript
    "@typescript-eslint/prefer-nullish-coalescing": 0,

    // using this rule to that  import exentsions are not need in typescript
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never"
      }
    ],

    // will allow us to ! use in typescript. Just make sure we are guarantee it needs wil be assigned. dont even display warning
    "@typescript-eslint/no-non-null-assertion": 0,
    "@typescript-eslint/strict-boolean-expressions": 0,

    // typescript detecing keys in interfaces as vars. want to disable this(but only for in this case. work around may have to be researched)
    "@typescript-eslint/no-unused-vars": "warn",

    // no console logs will throw error. we should be using log for things that are necessary logs. Console.logs must used to debug
    "no-console": ["error"],

    // allowing parameter reassign
    "no-param-reassign": 0,

    // allowing underscore dangle
    "no-underscore-dangle": 0,

    // allowing anyomous functions
    "func-names": 0,

    // problem with typescript where enums are producing shadows with enums
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],

    // allowing classes that just have static members only
    "@typescript-eslint/no-extraneous-class": 0,

    // allowing Promive<void> to be used
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],

    // ignores these types of file for eslint
    "import/no-unresolved": [
      2,
      {
        "ignore": ["next", "^@/", "^.+\\.module\\.(css|less|sass|scss)$"]
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  }
}
